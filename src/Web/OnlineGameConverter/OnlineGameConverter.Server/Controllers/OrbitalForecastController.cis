using Microsoft.AspNetCore.Mvc;
using OnlineGameConverter.Server.Classes;

namespace OnlineGameConverter.Server.Controllers
{
    [Route("[controller]")]
    [ApiController]
    public class OrbitalForecastController1 : Controller
    {
        private const string V = "GetOrbitalForecastFromNumber";
        Performer performer = new();

        [HttpPost(V)]
        public async Task<IEnumerable<OrbitalForecastItem>> GetOrbitalForecastFromNumber([FromBody] OrbitalForecastConditionNumber condition)
        {

            if (condition == null || condition.Begin >= condition.End)
            {
                return Enumerable.Empty<OrbitalForecastItem>();
            }
            var result = await performer.CalculateAsync(condition, HttpContext.RequestAborted);
            if (result == null || !result.Any())
            {
                return Enumerable.Empty<OrbitalForecastItem>();
            }
            return result;
            /* !!! GENERATED return result.Select(item => new OrbitalForecastItem(
                item.DateTime,
                item.X,
                item.Y,
                item.Z,
                item.Vx,
                item.Vy,
                item.Vz
            ));*/


        }
/*
        [HttpGet(Name = "GetOrbitalForecast")]
        public IEnumerable<WeatherForecast> Get()
        {
            return Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                Date = DateOnly.FromDateTime(DateTime.Now.AddDays(index)),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = Summaries[Random.Shared.Next(Summaries.Length)]
            })
            .ToArray();
        }

        private static readonly string[] Summaries = new[]
{
            "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
        };

*/

    }
}
