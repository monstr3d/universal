@page "/chartforecast"
<h3>Chart</h3>
<!--<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css" rel="stylesheet" />
    <link href="_content/Blazor.Bootstrap/blazor.bootstrap.css" rel="stylesheet" />
</head>-->

@using BlazorBootstrap
@rendermode InteractiveAuto



<PageTitle>Chart</PageTitle>

<LineChart @ref="lineChartCoordinate" Width="800" Class="mb-4" />
<LineChart @ref="lineChartVelocity" Width="800" Class="mb-4" />
<InputNumber @bind-Value=forecast.X/>
<Button Type="ButtonType.Button" Color="ButtonColor.Primary" Size="Size.Small" @onclick="async () => await ForeastAsync()"> Randomize </Button>

@code {
    Orbital.Forecast.Blasor.ForecastWeb forecast = new();
    private LineChart lineChartCoordinate = default!;
    private LineChart lineChartVelocity = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData[] chartData = default!;

    private LineChart[] lineChart;

    private int datasetsCount;
    private int labelsCount;


    List<List<object>> lists;


    void CreateChartData()
    {
        chartData =[ new ChartData()
               { Labels = GetDefaultDataLabels(3),
                Datasets = GetDefaultDataSets(3, 0) },
    new ChartData()
               { Labels = GetDefaultDataLabels(3),
                Datasets = GetDefaultDataSets(3, 1) }
        ];

    }

    protected override void OnInitialized()
    {
        BlazorApp.StaticExtension.Init();
        lists = forecast.Values;
        lineChart = [lineChartCoordinate, lineChartVelocity];
        CreateChartData();
        lineChartOptions = new() 
        { Responsive = true, Interaction = new Interaction 
            { Mode = InteractionMode.Index } };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            lineChart = [lineChartCoordinate, lineChartVelocity];
            for (int i = 0; i < chartData.Length; i++)
            {

                await lineChart[i].InitializeAsync(chartData[i], lineChartOptions);
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    #region Data Preparation

    private List<IChartDataset> GetDefaultDataSets(int numberOfDatasets, int i)
    {
        /*var datasets = new List<IChartDataset>();
        * 
        for (var index = 0; index < numberOfDatasets; index++)
            {
            datasets.Add(GetRandomLineChartDataset());
        }*/

        return GetCoordinaresDataSets(i);
    }

    private List<IChartDataset> GetCoordinaresDataSets(int i)
    {
        var datasets = new List<IChartDataset>();

        for (var index = 0; index < 3; index++)
        {
            var d = GetCoordinateChartDataset(index, i);
            datasets.Add(d);
        }

        return datasets;
    }

    async Task ForeastAsync()
    {
        lists = forecast.Values;
        CreateChartData();
        for (int i = 0; i < 2; i++)
        {
            await lineChart[i].UpdateAsync(chartData[i], lineChartOptions);
        }
    }


    LineChartDataset GetCoordinateChartDataset(int i, int j)
    {
        int k = 3 * i + j + 1;
        var c = ColorBuilder.CategoricalTwelveColors[k].ToColor();


        return new LineChartDataset
            {
                Label = $"Team {datasetsCount}",
                Data = GetCoordinates(i, j),
                BackgroundColor = new List<string> { c.ToRgbString() },
                BorderColor = new List<string> { c.ToRgbString() },
                BorderWidth = new List<double> { 2 },
                HoverBorderWidth = new List<double> { 4 },
                PointBackgroundColor = new List<string> { c.ToRgbString() },
                PointRadius = new List<int> { 0 }, // hide points
                PointHoverRadius = new List<int> { 4 }
            };

    }


    private List<double> GetCoordinates(int i, int j)
    {
        var data = new List<double>();
        var k = 3 * j + 1 + i;
        foreach (var l in lists)
        {
            
            data.Add((double)l[k]);
        }
        return data;
    }


    private List<string> GetDefaultDataLabels(int numberOfLabels)
    {
        var labels = new List<string>();
        for (var index = 0; index < lists.Count; index++)
        {
            labels.Add("");
        }

        return labels;
    }


    #endregion Data Preparation

}
