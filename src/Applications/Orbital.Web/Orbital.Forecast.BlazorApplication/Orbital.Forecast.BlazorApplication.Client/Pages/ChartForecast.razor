@page "/chartforecast"
<h3>Chart</h3>
<!--<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css" rel="stylesheet" />
    <link href="_content/Blazor.Bootstrap/blazor.bootstrap.css" rel="stylesheet" />
</head>-->

@using BlazorBootstrap
@rendermode InteractiveAuto



<PageTitle>Chart</PageTitle>

<LineChart @ref="lineChart" Width="800" Class="mb-4" />

<Button Type="ButtonType.Button" Color="ButtonColor.Primary" Size="Size.Small" @onclick="async () => await RandomizeAsync()"> Randomize </Button>

@code {
    Orbital.Forecast.Blasor.ForecastWeb forecast = new();
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;

    private int datasetsCount;
    private int labelsCount;

    private Random random = new();

    List<List<object>> lists;

    protected override void OnInitialized()
    {
        BlazorApp.StaticExtension.Init();
        lists = forecast.Values;
        chartData = new ChartData 
        { 
            Labels = GetDefaultDataLabels(3), 
            Datasets = GetDefaultDataSets(3) 
        };

        lineChartOptions = new() 
        { Responsive = true, Interaction = new Interaction 
            { Mode = InteractionMode.Index } };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task RandomizeAsync()
    {
        if (chartData is null || chartData.Datasets is null || !chartData.Datasets.Any()) return;

        var newDatasets = new List<IChartDataset>();

        foreach (var dataset in chartData.Datasets)
        {
            if (dataset is LineChartDataset lineChartDataset
                && lineChartDataset is not null
                && lineChartDataset.Data is not null)
            {
                var count = lineChartDataset.Data.Count;

                var newData = new List<double>();
                for (var i = 0; i < count; i++)
                {
                    newData.Add(random.Next(200));
                }

                lineChartDataset.Data = newData;
                newDatasets.Add(lineChartDataset);
            }
        }

        async Task ForeastAsync()
        {
            var newDatasets = new List<IChartDataset>();
            chartData.Datasets = newDatasets;
            foreach (var dataset in chartData.Datasets)
            {
                if (dataset is LineChartDataset lineChartDataset
                    && lineChartDataset is not null
                    && lineChartDataset.Data is not null)
                {
                    var count = lineChartDataset.Data.Count;

                    var newData = new List<double>();
                    for (var i = 0; i < count; i++)
                    {
                        newData.Add(random.Next(200));
                    }

                    lineChartDataset.Data = newData;
                    newDatasets.Add(lineChartDataset);
                }
            }

            await lineChart.UpdateAsync(chartData, lineChartOptions);
        }
    }
            /*
            private async Task AddDatasetAsync()
            {
        if (chartData is null || chartData.Datasets is null) return;

    var chartDataset = GetRandomLineChartDataset();
    chartData = await lineChart.AddDatasetAsync(chartData, chartDataset, lineChartOptions);
    }

    private async Task AddDataAsync()
    {
    if (chartData is null || chartData.Datasets is null)
    return;

    var data = new List<IChartDatasetData>();
        foreach (var dataset in chartData.Datasets)
            {
            if (dataset is LineChartDataset lineChartDataset)
    data.Add(new LineChartDatasetData(lineChartDataset.Label, random.Next(200)));
    }

    chartData = await lineChart.AddDataAsync(chartData, GetNextDataLabel(), data);
            }

            private async Task ShowHorizontalLineChartAsync()
    {
    lineChartOptions.IndexAxis = "y";
    await lineChart.UpdateAsync(chartData, lineChartOptions);
    }

        private async Task ShowVerticalLineChartAsync()
    {
    lineChartOptions.IndexAxis = "x";
    await lineChart.UpdateAsync(chartData, lineChartOptions);
    }*/

    #region Data Preparation

    private List<IChartDataset> GetDefaultDataSets(int numberOfDatasets)
    {
        /*var datasets = new List<IChartDataset>();

        for (var index = 0; index < numberOfDatasets; index++)
            {
            datasets.Add(GetRandomLineChartDataset());
        }*/

        return GetCoordinaresDataSets();
    }

    private List<IChartDataset> GetCoordinaresDataSets()
    {
        var datasets = new List<IChartDataset>();

        for (var index = 0; index < 3; index++)
        {
            var d = GetCoordinateChartDataset(index);
            datasets.Add(d);
        }

        return datasets;
    }

    LineChartDataset GetCoordinateChartDataset(int i)
    {
        var c = ColorBuilder.CategoricalTwelveColors[i].ToColor();

   
        return new LineChartDataset
            {
                Label = $"Team {datasetsCount}",
                Data = GetCoordinates(i),
                BackgroundColor = new List<string> { c.ToRgbString() },
                BorderColor = new List<string> { c.ToRgbString() },
                BorderWidth = new List<double> { 2 },
                HoverBorderWidth = new List<double> { 4 },
                PointBackgroundColor = new List<string> { c.ToRgbString() },
                PointRadius = new List<int> { 0 }, // hide points
                PointHoverRadius = new List<int> { 4 }
            };

    }


    private LineChartDataset GetRandomLineChartDataset()
    {
        var c = ColorBuilder.CategoricalTwelveColors[datasetsCount].ToColor();

        datasetsCount += 1;

        return new LineChartDataset
            {
                Label = $"Team {datasetsCount}",
                Data = GetRandomData(),
                BackgroundColor = new List<string> { c.ToRgbString() },
                BorderColor = new List<string> { c.ToRgbString() },
                BorderWidth = new List<double> { 2 },
                HoverBorderWidth = new List<double> { 4 },
                PointBackgroundColor = new List<string> { c.ToRgbString() },
                PointRadius = new List<int> { 0 }, // hide points
                PointHoverRadius = new List<int> { 4 }
            };
    }

    private List<double> GetCoordinates(int i)
    {
        var data = new List<double>();
        foreach (var l in lists)
        {
            
            data.Add((double)l[i + 1]);
        }
        return data;
    }

    private List<double> GetRandomData()
    {
        var data = new List<double>();
        for (var index = 0; index < labelsCount; index++)
        {
            data.Add(random.Next(200));
        }

        return data;
    }

    private List<string> GetDefaultDataLabels(int numberOfLabels)
    {
        var labels = new List<string>();
        for (var index = 0; index < lists.Count; index++)
        {
            labels.Add("");
        }

        return labels;
    }

    private string GetNextDataLabel()
    {
        labelsCount += 1;
        return $"Day {labelsCount}";
    }

    #endregion Data Preparation

}
