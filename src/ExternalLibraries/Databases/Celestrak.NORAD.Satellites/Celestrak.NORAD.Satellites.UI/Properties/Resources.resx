<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="celestrak" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAAAAAAAAAAAAAAAAAAAA
</value>
  </data>
</root>