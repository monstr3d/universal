using System;
using System.Collections.Generic;
using System.Text;
using System.ServiceModel;
using System.Runtime.Serialization;



namespace HttpClient
{
    /// <summary>
    /// This is the data structure for event.Here data structure makes serializable.
    /// </summary>


    /// <summary>
    /// This is the service contract of Publish Service
    /// </summary>
    [ServiceContract]
    interface IEvent
    {
        [OperationContract(IsOneWay = true)]
        void OnEvent();

    }

    /// <summary>
    /// This is the Service contract for SubscriptionService
    /// </summary>
    [ServiceContract(CallbackContract = typeof(IEvent))]
    public interface IRegistration
    {
        [OperationContract]
        void Register();

        [OperationContract]
        void UnRegister();

   }

   
    namespace AthenaEventClient
    {
        /// <summary>
        /// This ia the proxy class that is automatically generated by proxy genarator tool for cms.
        /// </summary>
        public partial class RegistrationProxy : DuplexClientBase<IRegistration>, IRegistration
        {

            public RegistrationProxy(System.ServiceModel.InstanceContext callbackInstance)
                : base(callbackInstance)
            {
            }

            public RegistrationProxy(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName)
                : base(callbackInstance, endpointConfigurationName)
            {
            }

            public RegistrationProxy(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress)
                : base(callbackInstance, endpointConfigurationName, remoteAddress)
            {
            }

            public RegistrationProxy(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress)
                : base(callbackInstance, endpointConfigurationName, remoteAddress)
            {
            }

            public RegistrationProxy(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress)
                : base(callbackInstance, binding, remoteAddress)
            {
            }

            #region IRegistration Members

            void IRegistration.Register()
            {
                base.Channel.Register();
            }

            void IRegistration.UnRegister()
            {
                base.Channel.UnRegister();
            }

            #endregion
        }

    }

}
